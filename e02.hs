
module Main where
{-
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
-}
main = do
  putStrLn " :: Euler problem 02: Fibbos Sum ::"
  putStrLn (" :: Sum of even fibs up to 1M: " ++ show (sum (filter even (fibsUpTo 1 4000000))))

  

fibsUpTo :: Integer -> Integer -> [Integer]
fibsUpTo current end
  | value > end = []
  | otherwise   = value : fibsUpTo (current+1) end
  where value = fib current
  
  
  {-
  fibsLessThan :: Integer -> [Integer]
fibsLessThan n = fmap fib [1..]

fibs :: [Integer]
fibs = fmap fib [1..]
-}

fib :: Integer -> Integer
fib 0 = 1
fib 1 = 1
fib x = fib (x-1) + fib (x-2)


